/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Stack;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {

  @Test
  @DisplayName("Can successfully push onto a stack")
  void test1() {
    StackStructure stack=new StackStructure();
    stack.push("s");


    assertEquals("{ s } -> NULL", stack.to_string());
  }
  @Test
  @DisplayName("Can successfully push multiple values onto a stack")
  void test2() {
    StackStructure stack=new StackStructure();
    stack.push("s");
    stack.push("t");
    stack.push("a");


    assertEquals("{ a } -> { t } -> { s } -> NULL", stack.to_string());
  }
  @Test
  @DisplayName("Can successfully pop off the stack")
  void test3() {

    StackStructure stack=new StackStructure();
    stack.push("s");
    stack.push("t");
    stack.push("a");



    assertEquals("a", stack.pop());
  }
  @Test
  @DisplayName("Can successfully empty a stack after multiple pops")
  void test4() {
    StackStructure stack=new StackStructure();
    stack.push("s");
    stack.push("t");
    stack.push("a");
    stack.pop();
    stack.pop();
    stack.pop();


    assertEquals(true, stack.isEmpty());
  }
  @Test
  @DisplayName("Can successfully peek the next item on the stack")
  void test5()  throws Exception {
    StackStructure stack=new StackStructure();
    stack.push("s");
    stack.push("t");
    stack.push("a");



    assertEquals("a", stack.peek());
  }
  @Test
  @DisplayName("Can successfully instantiate an empty stack")
  void test6()  throws Exception {
    StackStructure stack=new StackStructure();



    assertEquals("List is empty", stack.to_string());
  }
  @Test
  @DisplayName("Calling pop or peek on empty stack raises exception")
  void test7()  throws Exception {
    StackStructure stack=new StackStructure();



    assertThrows(java.lang.Exception.class, stack::peek);
  }


}
